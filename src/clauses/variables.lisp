(in-package :lang.cypher.clause)

(defvar *clause-list*
  '((:create                clause-create)
    (:delete                clause-delete)
    (:match                 clause-match)
    (:return                clause-return)
    (:call                  clause-call)
    (:create-unique         clause-create-unique)
    (:detach-delete         clause-detach-delete)
    (:drop-constraint       clause-drop-constraint)
    (:drop-index            clause-drop-index)
    (:foreach               clause-foreach)
    (:limit                 clause-limit)
    (:load-csv              clause-load-csv)
    (:merge                 clause-merge)
    (:on-create             clause-on-create)
    (:on-match              clause-on-match)
    (:order-by              clause-order-by)
    (:remove                clause-remove)
    (:set                   clause-set)
    (:skip                  clause-skip)
    (:union                 clause-union)
    (:union-all             clause-union-all)
    (:unwind                clause-unwind)
    (:using-index           clause-using-index)
    (:using-index-seek      clause-using-index-seek)
    (:using-join            clause-using-join)
    (:using-periodic-commit clause-using-periodic-commit)
    (:using-scan            clause-using-scan)
    (:where                 clause-where)
    (:yield                 clause-yield)
    (:optional-match        clause-optional-match)
    (:start                 clause-start)
    (:with                  clause-with)))

(defvar *clauses*
  (reduce #'(lambda (ht clause)
              (let ((key      (first  clause))
                    (operator (second clause)))
                (setf (gethash key ht)
                      operator))
              ht)
          *clause-list*
          :initial-value (make-hash-table)))
